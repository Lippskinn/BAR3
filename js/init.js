    /** STATE OBJECT
        state is initiated on every page for storing
        data which might be send vie AJAX */
    class State {
        constructor(init) {
            this.state = {};
            this.setState(init);
            if(window.dev) { console.log("State created."); }
        }

        getState() {
            return this.state;
        }

        setState(obj) {
            if(obj != null) {
                Object.assign(this.state, obj);
                if(window.dev) {
                    console.log("Object added to state: ", obj);
                    console.log(this.state);
                }
            } else {
                if(window.dev) {
                    console.error("No object assigned to state.");
                }
            }
        }
    }


/** Initiates index page
    - initially all resources  (by default all database offers are shown)
    - renders filter box with calender, map and list of offers  */
    function initIndex(){
		let state = new State({
        items: null,
        itemsSim: null,
        isIndex: true,
        filters: {
            categories: null,
			keywords: null,
			lat: null,
			lng: null,
			umkreis: null,
			startDate: null,
			endDate: null
			}
		});
		initMap(state);
		initFilterForm(state);
		submitFilterForm(state);
		initDatePicker(state, false);
    }


    /** Initiates filter box on index page
        - adds event listener to transform entered PLZ into coordinates*/
	function initFilterForm(state){
	    var GeoSearchControl = window.GeoSearch.GeoSearchControl;
		var OpenStreetMapProvider = window.GeoSearch.OpenStreetMapProvider;
		const provider = new OpenStreetMapProvider();
		const form = $("#filtSub");
        const input = document.getElementById('inputPLZ');

        // After submit button is clicked, chosen PLZ is sent to geosearch server
		$(form).on('click', async (event) => {
			event.preventDefault();
			const results = await provider.search({ query: input.value });
			//If nothing is found, default values are sent
			if(results.length > 0){
				console.log(results);
				// --- Validation of coordinates:
				// --- If received longitude/latitude is beyond limits - fall back to default values
				const plzX = (results[0].x > 10.657740 && results[0].x < 11.095133) ? results[0].x : 10.870170;
				const plzY = (results[0].y > 49.816219 && results[0].y < 49.962647) ? results[0].y : 49.89300;
				state.getState().filters.lng = plzX;
				state.getState().filters.lat = plzY;
			}
			submitFilterForm(state);
		});
	}


    /** Initiates page for single offer:
        - draws a calendar with colored dates to show availability
        - since calendar is generated by a third-part library,
          styles and position are modified manually after rendering
        - shows map with marker */
    function initSingle(offers){
    	let state = new State({
            items: offers,
            singlePage: true,
            filters: {
                startDate: null,
                endDate: null
            }
		});
		console.log(offers);
		initDatePicker(state, true);
		$(".daterangepicker").appendTo("#staticCalendar");
		$( "#dateInput" ).trigger( "click" );
		$(".right").remove();
		initMap(state);
		updateMap(state);
    }


    /** Initiates form for adding new resource
        - event listener: if time constraint is chosen, it is written to the State */
    function initNewOffer(lat, long, st){
    	let state = new State({
    	isNewOffer: true,
        filters: {
			startDate: st == 0 ? null : st,
			endDate: null,
			lat: lat,
			long: long
			}
		});
		console.log(state);
		$("#dateInput").on("change", function(e) {
             $('#id_startDate').val(state.getState().filters.startDate);
             $('#id_endDate').val(state.getState().filters.endDate);

        });
		initDatePicker(state, false);
		initMap(state);
		draggableMarker(state);
    }

    /** Variables block: stores number of offers currently displayed in different blocks
        - are modified by loadMore() function */
    var merklisteCurrent = 0;
    var myOffersCurrent = 0;
    var offersOnIndex = 0;
    var simOffersOnIndex = 0;


    /** Initiates profile page */
    function initDashboard(ints, res_id){
    	let state = new State({
    	items: ints,
    	editAvail: (ints != null),
    	singlePage: false,
        filters: {
			startDate: null,
			endDate: null
			}
		});
		console.log(state);
		// Ten offers are shown by default on each tab, others get loaded by "mehr laden" button
        loadMore('merklisteCont', 10);
        loadMore('offerCont', 10);
        loadMore('queryCont', 10);
        // In case editing offer's availability mode is active, render a calender
        updateConstraintsCalendar(state);

        // If a new interval was picked in editing availability mode, pass changes to server
		$("#dateInput").on("change", function(e) {
		    if(state.getState().filters.startDate != null && state.getState().filters.endDate != null){
		        window.location = "/angebot/" + res_id + "/addConstraint/" + state.getState().filters.startDate + "/" + state.getState().filters.endDate + "/";
		    }
        });

        // Load more offers by clicking "mehr laden"
         $('#merklisteContLoader').on("click", (e) => {
				loadMore('merklisteCont', 10);
	     });
	     $('#offerContLoader').on("click", (e) => {
				loadMore('offerCont', 10);
	     });
	     $('#queryContLoader').on("click", (e) => {
				loadMore('queryCont', 10);
	     });

	     // Restyle calender after it was rendered by third-party library
	     if(ints != null){
             $(".end-date").removeClass("end-date active");
             $(".start-date").removeClass("start-date active");
             $(".in-range").removeClass("in-range ");
             $(".applyBtn").prop('disabled', true);
             var cont = $("#negativeIntervals");
             cont.empty();
             // Add a label under calender for every negative interval - enables removing chosen intervals again
             for(i of ints){
             // Interval is negative and is not over yet
                if(!i.fields.available && moment().diff(moment(i.fields.endDate)) < 0 ){
                    $("#alreadyLent").removeClass("invisible");
                    var myHref = "/angebot/deleteConstraint/" + i.pk + "/";
                    let subcont = $(`<div class=" col-6 offset-3"><span class="label label-danger">${ moment(i.fields.startDate).format("DD.MM.YYYY") } - ${ moment(i.fields.endDate).format("DD.MM.YYYY") }  </span> <a href="${myHref}"><i class="fas fa-times"></i></a> </div>`);
                    cont.append(subcont);
                }
             }
         }
    }


    /** Renders calender on dashboard page */
    var updateConstraintsCalendar = function(state){
	       initDatePicker(state, false);
	       console.log($(".daterangepicker"));
		   $(".daterangepicker").appendTo("#staticCalendar");
		   $("#dateInput").addClass("invisible");
		   $( "#dateInput" ).trigger( "click" );
	}


    /** United function for loading a certain portion of offers
            @param cont - specifies which block needs to be expanded
            @param increment - number of offers to be loaded*/
         var loadMore = function(cont, increment){
            var counter;
            var items = $('.' + cont);

            if(cont == 'merklisteCont'){
                merklisteCurrent = merklisteCurrent + increment;
                counter = merklisteCurrent;
            }else if(cont == 'offerCont'){
                myOffersCurrent = myOffersCurrent + increment;
                counter = myOffersCurrent;
            }else if(cont == 'simOffersOnIndex'){
                simOffersOnIndex = simOffersOnIndex + increment;
                counter = simOffersOnIndex;
            }else{
                offersOnIndex = offersOnIndex + increment;
                counter = offersOnIndex;
            }
            console.log("counter: " + counter);
                        console.log("items: " + items.length);

            if(counter >= items.length){
                $('#' + cont + "Loader").addClass("disabled");
            }
            items.attr('style', 'display: none');
            for(var i = 0; i < items.length && i < counter; i++){
                items[i].style = 'display: flex';
            }
    }


    /** Initiates map with bounds (no markers yet) */
    function initMap(state){
    	let map = L.map(mapCont);
   		const osmUrl='http://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png';
		const osmAttrib='';
    	const bounds = L.bounds(new L.LatLng(49.962647, 10.657740),new L.LatLng(49.816219, 11.095133));

    	let osm = new L.tileLayer(osmUrl, {
            minZoom: 10,
            maxZoom: 17,
            attribution: osmAttrib,
            maxBounds: bounds,
			maxBoundsViscosity: 1.0
        });		
		map.setView(new L.LatLng(49.89300, 10.870170), 14);
   		map.addLayer(osm);
		state.setState({Map: map});
    }


	/** Sends chosen filter options to server via AJAX */
	function submitFilterForm(state){
	    //Get values from input fields and write them to State
		const keyword = $("#keySearch")[0].value;
		const umkreis = $("#umkreisSelect")[0].value;
		state.getState().filters.keywords = keyword;
		state.getState().filters.umkreis = umkreis;
		const umkrValue = umkreis.substring(0, umkreis.indexOf('k')-1);

		var reqJSON = {
		      categories: state.getState().filters.categories,
              keywords: keyword,
              lat: state.getState().filters.lat,
              lng: state.getState().filters.lng,
              umkreis: umkrValue,
              startDate: state.getState().filters.startDate,
              endDate: state.getState().filters.endDate
		};
		state.getState().filters.categories = parseInt($('#catSelect').find(":selected")[0].value);
		console.log("Form was submitted with following filters:");
		console.log(JSON.stringify(reqJSON));

        //Request filtered data
		$.ajax({
               url: "/search/",
               type: "POST",
               dataType: "json",
               data: reqJSON,
               statusCode: {
                 200: function (data) {
                    console.log("This came back:");
                    console.log(JSON.stringify(data));
                    state.setState({items: data});
                    $.ajax({
                       url: "/search/similar/",
                       type: "POST",
                       dataType: "json",
                       data: reqJSON,
                       statusCode: {
                         200: function (dataSim) {
                            //--- Request similar offers - for less filter options
                            //Remove accurate results to avoid repetitions
                            let accurateResults = JSON.parse(data);
                            let simWithRepetitions = JSON.parse(dataSim);
                            let simUnique = [];
                            for(item1 of simWithRepetitions){
                                let repet = false;
                                for(item2 of accurateResults){
                                    if(item2.pk == item1.pk){
                                        repet = true;
                                        break;
                                    }
                                }
                                if(!repet) simUnique.push(item1);
                            }
                            state.setState({itemsSim: JSON.stringify(simUnique)});

                            //Update data on map and offers list
                            updateOffersOnIndex(state);
                            updateMap(state);
                         }
                     }
                    });
                  },
                  404: function () {
                       console.log("error occurred during ajax request");
                  }
               },
               complete: function (jqXHR, textStatus) {
                  // Things to do after everything is completed
               }
            });
	}


    /** Clears offers list on index page and renders it anew */
	function updateOffersOnIndex(state){

	    // Checks whether both exact and inexact data is present
	    let resBlocks = state.getState().itemsSim == '' ? [JSON.parse(state.getState().items)] : [JSON.parse(state.getState().items), JSON.parse(state.getState().itemsSim)];
	    let headers = [`<h2 id="numResourcesFound">${ resBlocks[0].length } Angebote gefunden:</h2>`,  `<h2 id="numResourcesFound">Ergebnisse für weniger Suchbegriffe:</h2>`];

        let parent = $("#foundResourcesParent");

        //Empty container with old offers
        parent.empty();
        //Create a row

        let littleCounter = 0;
        //Repeat following for both exact and inexact matches blocks
        for(res of resBlocks){
        console.log(state);
                let contsRow = $(`<div class="row" id="foundResourcesRow" style="padding: 10px;"></div>`);
                let header = $(`<div class="col-md-12  desc-comp-offer "  style="padding-bottom: 20px;">
                    ${headers[littleCounter]}
                  </div>`);
                  //Append header to row
                contsRow.append(header);
                for(r of res){
                console.log(res);
                    let imageUrl = urlExists("/" + r.fields["imagePath"]) ? ("/" + r.fields["imagePath"]) : '/static/images/offers/noimage.jpg';
                    let myHref = "/angebot/" + r.pk + "/";
                    let myImgStyle = "url('" + imageUrl + "')";

                    let cont =  $(`<div class="col-md-3 col-sm-6 desc-comp-offer wow fadeInUp offerOnIndex" data-wow-delay="0.4s" >
                    <div class="desc-comp-offer-cont col-12">
                      <div class="thumbnail-blogs  " >
                          <div class="caption">
                            <i class="fa fa-chain"></i>
                          </div>
                          <div class="imageIndCont">
                          <img class="img img-responsive full-width" src=${imageUrl} />
                          </div>
                      </div>
                      <h3>${r.fields["title"]}</h3>
                      <p class="desc">${r.fields["description"]}</p>
                        <row>
                            <a class="col-10 offset-1 col-md-8 offset-md-2 btn  btn-general btn-white " href=${myHref} style="">Zum Angebot</a>
                        </row>
                    </div>
                  </div>`);
                  contsRow.append(cont);
                }
                if(res.length > 0){
                     let btnType = littleCounter == 0 ? 'offerOnIndexLoader' : 'simOfferOnIndexLoader';
                     contsRow.append(`<div class="col-12"><div id=${btnType} class="btn btn-primary col-12 col-md-6 offset-md-3 loadmoreBtn">Mehr laden</div></div>`);
                }else{
                     contsRow.append(`<p >Keine Angebote gefunden</p>`);
                }
                parent.append(contsRow);
                littleCounter++;
        }
        $('#offerOnIndexLoader').on("click", (e) => {
				loadMore('offerOnIndex', 15);
	    });
        loadMore("offerOnIndex", 15);
        loadMore("simOfferOnIndex", 15);
	}


    /** Update markers on map */
	function updateMap(state){
	    // Help function - Check if data is already parsed or not
	    var checkIfJson = function isJSON(data) {
            var ret = true;
            try {
                JSON.parse(data);
            }catch(e) {
                ret = false;
            }
             return ret;
        }

		let tempMap = state.getState().Map; 
		let mlOld = state.getState().markerLayer;

		let data = checkIfJson(state.getState().items) ? JSON.parse(state.getState().items) : state.getState().items;
		console.log(data);

		// Remove old markers
		if(mlOld) {
			tempMap.removeLayer(mlOld);
		}
		let markerGroup = L.markerClusterGroup().addTo(tempMap);
		    
		for(loc of data) {
		  if(loc.fields["locationLong"] > 10.657740 && loc.fields["locationLong"] < 11.095133 && loc.fields["locationLat"] > 49.816219 && loc.fields["locationLat"] < 49.962647){
		  	let imageUrl = urlExists("/" + loc.fields["imagePath"])  ? ("/" + loc.fields["imagePath"]) : '/static/images/offers/noimage.jpg' ;
		  	let popup = $(`

				<div class="row" style="padding: 10px;">
				<h3 class="col-12">${loc.fields["title"]}</h3>
				<div class="col-6">
                  <div class="imageIndCont">
					<img class="img img-responsive full-width"  src=${imageUrl} />
                  </div>
				</div>
					<p class="col-12">
					${loc.fields["description"]}
					</p>
				</div>
				`).addClass("outerPopup");

                const marker = L.marker( [ loc.fields["locationLat"], loc.fields["locationLong"] ] )
                .bindPopup(
                    $(popup).append('<div class="col-12"><a href="/angebot/'+ loc.pk +'/" style="color: #000" class="col-12  btn btn-primary">Zum Angebot</a></div>')
                            .click( (e) => { console.log("Single product was clicked")})[0])
                            .bindTooltip( loc.fields["title"] )
                            .addTo( markerGroup );
                tempMap.fitBounds(markerGroup.getBounds().pad(0.5));
                state.setState({markerLayer: markerGroup});
                state.setState({Map: tempMap});
            }
	    }
	}


    /** Render draggable marker on page for creating new resources */
	function draggableMarker(state){
	    var GeoSearchControl = window.GeoSearch.GeoSearchControl;
		var OpenStreetMapProvider = window.GeoSearch.OpenStreetMapProvider;
		const provider = new OpenStreetMapProvider();
		const form = $("#filtSub");
        const input = document.getElementById('plzInput');
	    const input2 = document.getElementById('streetInput');

        // Update marker position if address for entered manually
		input2.addEventListener('keyup', async (event) => {
			const results = await provider.search({ query: input2.value + " " + input.value });
			if(results.length > 0){
				(new L.LatLng(49.962647, 10.657740),new L.LatLng(49.816219, 11.095133));
				const plzX = (results[0].x > 10.657740 && results[0].x < 11.095133) ? results[0].x : 10.870170;
				const plzY = (results[0].y > 49.816219 && results[0].y < 49.962647) ? results[0].y : 49.89300;
				updateMarker(plzY, plzX);
				document.getElementById('latInput').value = marker.getLatLng().lat;
                document.getElementById('longInput').value = marker.getLatLng().lng;
			}
		});

		let tempMap = state.getState().Map;
        let markerGroup = L.markerClusterGroup().addTo(tempMap);

		var marker = L.marker(new L.LatLng(state.getState().filters.lat, state.getState().filters.long), {
            draggable: true
        }).addTo(markerGroup);

        // Help function - create new marker
        var updateMarker = function(lat, lng){
              var newLatLng = new L.LatLng(lat, lng);
              marker.setLatLng(newLatLng);
              tempMap.fitBounds(markerGroup.getBounds().pad(0.5));
		      state.setState({markerLayer: markerGroup});
		      state.setState({Map: tempMap});
        }

        // Write new coordinates to State if marker was dragged
        marker.on('dragend', function (e) {
             document.getElementById('latInput').value = marker.getLatLng().lat;
             document.getElementById('longInput').value = marker.getLatLng().lng;
         });
        tempMap.fitBounds(markerGroup.getBounds().pad(0.5));
		state.setState({Map: tempMap});
    }



    /** Initiates calendar */
	function initDatePicker(state, isSingle){
		var hasIntervals = null;
		// Identify which page called the function and pass negative intervals if needed
		if(state.getState().singlePage){
		    hasIntervals = state.getState().items[0].fields.intervals;
		}else if(state.getState().editAvail){
		    hasIntervals = state.getState().items;
		}else if(state.getState().isIndex || state.getState().isNewOffer || state.getState().isNewQuery){
		    hasIntervals = -1;
		}

        $('#dateInput').daterangepicker({
        "locale": {
            "format": "DD/MM/YYYY",
            "separator": " - ",
            "applyLabel": state.getState().editAvail ? "Auswahl bestätigen" : "Ok",
            "cancelLabel": "Abbrechen",
            "fromLabel": "Von",
            "toLabel": "Bis",
            "weekLabel": "W",
            "daysOfWeek": [
                "So",
                "Mo",
                "Di",
                "Mi",
                "Do",
                "Fr",
                "Sa"
            ],
            "monthNames": [
                "Januar",
                "Februar",
                "März",
                "April",
                "Mai",
                "Juni",
                "Juli",
                "August",
                "September",
                "Oktober",
                "November",
                "Dezember"
            ],
            "firstDay": 1
        },
        "showCustomRangeLabel": false,
        "minDate": moment().format('DD/MM/YYYY'),
        "maxDate": '31/12/2030',
        "startDate": state.getState().filters.startDate ? state.getState().filters.startDate : moment().format('DD/MM/YYYY'),
        "endDate": state.getState().filters.endDate ? state.getState().filters.endDate : moment().add(1, 'week').format('DD/MM/YYYY'),
        "opens": "center",
        "drops": "up",
        "singleDatePicker": isSingle,
        "intervals": hasIntervals
        }, function(start, end, label) {
            state.getState().filters.startDate = start.format('YYYY-MM-DD');
            state.getState().filters.endDate = end.format('YYYY-MM-DD');
            console.log(state);
        });
		
	}


	/**  FOR TESTING - Generates dummy data for markers
	      currently not used any longer
	*/
	function dummyDataGenerator(number){
		var items = [];
		
		for(a=0; a<=number; a++){
			var charset = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789";
			var myName = "";
			for (var i = 0, n = charset.length; i < 10; ++i) {
				myName += charset.charAt(Math.floor(Math.random() * n));
		}
			
		var desc  = "";
		for (var i = 0, n = charset.length; i < 50; ++i) {
		    if(i%6 == 0){
		        desc+= " ";
		    }else{
		    	desc += charset.charAt(Math.floor(Math.random() * n));
		    }
		}
		var latt = (Math.random() * (49.962647 - 49.816219) + 49.816219).toFixed(6);
		var lng = (Math.random() * (11.095133 - 10.657740) + 10.657740).toFixed(6);

		var item = {
				id: a+1,
				name: myName,
				description: desc,
				category: "Haushaltsinventar",
				type: "verschenken",
				owner: "John Doe",
				lattitude: latt,
				longitude: lng
				};
		items.push(item);
		}
		return items;
	}
	

	/** Help function - checks whether passed url exists (for images fallbacks) */
    function urlExists(url){
        var http = new XMLHttpRequest();
        http.open('HEAD', url, false);
        http.send();
        return http.status!=404;
    }


    /** Initiates form for adding a query */
    function initNewQuery(){
    	let state = new State({
    	isNewQuery: true,
        filters: {
			startDate: null,
			endDate: null,
			lat: 10.870170,
			long: 49.89300
			}
		});
		$("#dateInput").on("change", function(e) {
             $('#startDateInput').val(state.getState().filters.startDate);
             $('#endDateInput').val(state.getState().filters.endDate);
        });
		initDatePicker(state, false);
		var GeoSearchControl = window.GeoSearch.GeoSearchControl;
		var OpenStreetMapProvider = window.GeoSearch.OpenStreetMapProvider;
		const provider = new OpenStreetMapProvider();
		const form = $("#streetInput");
		const plzInput = $("#plzInput");

		$(form).on('change', async (event) => {
			event.preventDefault();
				const results = await provider.search({ query: plzInput[0].value + " " + form[0].value });
				if(results.length > 0){
				console.log(results);
					const plzX = (results[0].x > 10.657740 && results[0].x < 11.095133) ? results[0].x : 10.870170;
					const plzY = (results[0].y > 49.816219 && results[0].y < 49.962647) ? results[0].y : 49.89300;
					state.getState().filters.lng = plzX;
					state.getState().filters.lat = plzY;
					$("#longInput").val(plzX);
					$("#latInput").val(plzY);
				}
		});
    }